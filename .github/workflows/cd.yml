name: cd

on:
  push:
    tags:
    - '*'

env:
  PROJECT_ID: ${{ secrets.RUN_PROJECT }}
  GITHUB_SHA: ${{ github.sha }}
  GITHUB_REF: ${{ github.ref }}
  ORG: roava.io/platform
  IMAGE: fluentd
  REGISTRY_HOSTNAME: gcr.io/${{ secrets.RUN_PROJECT }}

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    # needs: [ ci ]
    steps:
      - name: Get the tag
        id: get_tag
        run: echo ::set-output name=TAG::${GITHUB_REF/refs\/tags\//}

      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_tag.outputs.TAG }}
          release_name: $IMAGE.${{ steps.get_tag.outputs.TAG }}
          draft: true

  deploy:
    name: Deploy tagged docker image to GCR
    runs-on: ubuntu-latest
    # needs: [ ci ] # Only run this workflow when "ci" action succeeds

    steps:
    - name: Get the tag
      id: get_tag
      run: echo ::set-output name=TAG::${GITHUB_REF/refs\/tags\//}

    - name: Print version
      run: |
        echo [github.tag]: ${{ steps.get_tag.outputs.TAG }}
        echo [github.sha]: ${{ github.sha }}
        echo [github.ref]: ${{ github.ref }}
        echo [github.actor]: trigered by $GITHUB_ACTOR
    - name: Checkout
      uses: actions/checkout@v2

    # Setup gcloud CLI
    - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
      with:
        version: '290.0.1'
        service_account_key: ${{ secrets.RUN_SA_KEY }}
        project_id: ${{ secrets.RUN_PROJECT }}

    # Configure docker to use the gcloud command-line tool as a credential helper
    - run: |
        # Set up docker to authenticate
        # via gcloud command-line tool.
        gcloud auth configure-docker
    # Build the Docker image
    # images name in format - [ORG]/[IMAGE] e.g. roava.io/myimage
    - name: Build
      id: build
      run: |
        export TAG=`echo ${{ steps.get_tag.outputs.TAG }}`
        export CONTAINER=`echo $ORG/$IMAGE`
        docker build -t "$REGISTRY_HOSTNAME"/"$CONTAINER":"$TAG" \
        -t "$REGISTRY_HOSTNAME"/"$CONTAINER":"${GITHUB_SHA::8}" \
        -t "$REGISTRY_HOSTNAME"/"$CONTAINER":"$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" .

    # Push the Docker image to Google Container Registry
    # images name in format - [ORG]/[IMAGE] e.g. roava.io/myimage
    # docker push "$REGISTRY_HOSTNAME"/"$CONTAINER":"$GITHUB_SHA"
    - name: Publish
      id: publish
      run: |
        export TAG=`echo ${{ steps.get_tag.outputs.TAG }}`
        export CONTAINER=`echo $ORG/$IMAGE`
        docker push "$REGISTRY_HOSTNAME"/"$CONTAINER"

